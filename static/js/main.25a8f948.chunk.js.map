{"version":3,"sources":["redux/types/cart.ts","component/Page/Page.tsx","component/QuantitySwitcher/QuantitySwitcher.tsx","component/CartItem/CartItem.tsx","redux/actions/cart.ts","component/Field/Field.tsx","component/Form/Form.tsx","component/Modal/Modal.tsx","containers/CartPage/CartPage.tsx","App.tsx","reportWebVitals.ts","redux/reducers/cart.ts","redux/reducers/index.ts","api/cartApi.ts","redux/sagas/cart.ts","redux/store/store.ts","index.tsx"],"names":["Constants","Page","title","children","className","QuantitySwitcher","quantity","decrementQuantity","incrementQuantity","type","onClick","disabled","data-testid","CartItem","item","deleteItem","name","price","CartItemPrice","toLocaleString","style","currency","getItems","cartItems","GET_ITEMS_SUCCESS","payload","Field","label","error","message","ErrorMessage","Form","addItem","useState","form","setForm","setError","getValidationError","value","String","trim","length","handleInputChange","e","target","onSubmit","preventDefault","errorResult","key","validationError","validateForm","Object","keys","Number","Math","floor","noValidate","onChange","required","min","step","Modal","close","stopPropagation","CartPage","cart","useSelector","state","dispatch","useDispatch","useEffect","GET_ITEMS_REQUEST","isLoading","OPEN_ADD_FORM","items","map","id","INCREMENT_QUANTITY","DECREMENT_QUANTITY","DELETE_ITEM","openAddForm","CLOSE_ADD_FORM","cartItem","ADD_ITEM","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","getNextId","reduce","max","rootReducer","combineReducers","action","GET_ITEMS_ERROR","filter","getCartItemsApi","a","fetch","res","json","fetchCart","cartSaga","call","put","takeEvery","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","run","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.25a8f948.chunk.js","sourcesContent":["export type cartItemT = {\r\n    id: number,\r\n    name: string,\r\n    price: number,\r\n    quantity: number\r\n}\r\n\r\nexport type newCartItemT = Omit<cartItemT, 'id'>;\r\n\r\nexport type cartStateT = {\r\n    isLoading: boolean,\r\n    openAddForm: boolean,\r\n    items: Array<cartItemT>,\r\n}\r\n\r\nexport enum Constants  {\r\n    GET_ITEMS_REQUEST = 'GET_ITEMS_REQUEST',\r\n    GET_ITEMS_SUCCESS = 'GET_ITEMS_SUCCESS',\r\n    GET_ITEMS_ERROR = 'GET_ITEMS_ERROR',\r\n    OPEN_ADD_FORM= 'OPEN_ADD_FORM',\r\n    CLOSE_ADD_FORM= 'CLOSE_ADD_FORM',\r\n    ADD_ITEM= 'ADD_ITEM',\r\n    DELETE_ITEM= 'DELETE_ITEM',\r\n    INCREMENT_QUANTITY = \"INCREMENT_QUANTITY\",\r\n    DECREMENT_QUANTITY = \"DECREMENT_QUANTITY\"\r\n}\r\n","import './Page.scss';\r\n\r\ntype pageT = {\r\n    title: string,\r\n    children: React.ReactNode\r\n}\r\n\r\nexport const Page = ({title, children} : pageT) => {\r\n    return <div className={'page'}>\r\n        <div className=\"page__inside\">\r\n            <header className=\"header\">\r\n                <h1 className=\"header__title\">{title}</h1>\r\n            </header>\r\n            <main className={'main'}>\r\n                {children}\r\n            </main>\r\n            <footer className=\"footer\" />\r\n        </div>\r\n    </div>\r\n}","import './QuantitySwitcher.scss';\r\n\r\ntype quantitySwitcherP = {\r\n    quantity: number,\r\n    incrementQuantity: () => void,\r\n    decrementQuantity: () => void\r\n}\r\n\r\nexport const QuantitySwitcher = ({quantity, decrementQuantity, incrementQuantity} : quantitySwitcherP) => {\r\n    return <div className={'quantity-switcher'}>\r\n        <button type={'button'} className=\"quantity-switcher__btn btn btn_small\" onClick={decrementQuantity} disabled={(quantity <= 1)}>-</button>\r\n        <div className=\"quantity-switcher__current\" data-testid={'quantity-current'}>{quantity}</div>\r\n        <button type={'button'} className=\"quantity-switcher__btn btn btn_small\" onClick={incrementQuantity} >+</button>\r\n    </div>\r\n}","import './CartItem.scss';\r\nimport {cartItemT} from \"../../redux/types/cart\";\r\nimport {QuantitySwitcher} from \"../QuantitySwitcher/QuantitySwitcher\";\r\n\r\ntype cartItemP = {\r\n    item: cartItemT,\r\n    deleteItem: () => void,\r\n    decrementQuantity: () => void,\r\n    incrementQuantity: () => void,\r\n}\r\n\r\nexport const CartItem = ({item, deleteItem, decrementQuantity, incrementQuantity} : cartItemP) => {\r\n    return <div className={'cart-item'} data-testid={'cart-item'}>\r\n        <div className=\"cart-item__body\">\r\n            <div className=\"cart-item__content\">\r\n                <h2 className=\"cart-item__name\">{item.name}</h2>\r\n                <CartItemPrice price={item.price} quantity={item.quantity}/>\r\n            </div>\r\n            <div className=\"cart-item__actions\">\r\n                <button data-testid='delete-btn' type={'button'} className=\"cart-item__delete-btn btn btn_small\" onClick={deleteItem} />\r\n                <QuantitySwitcher quantity={item.quantity} decrementQuantity={decrementQuantity} incrementQuantity={incrementQuantity}/>\r\n            </div>\r\n        </div>\r\n\r\n    </div>\r\n}\r\n\r\ntype cartItemPriceP = {\r\n    quantity: number,\r\n    price: number\r\n}\r\n\r\nconst CartItemPrice = ({quantity, price} : cartItemPriceP) => {\r\n    return <div className={'cart-item__price'}>\r\n        <div className=\"cart-item__fullprice\">{(price * quantity).toLocaleString('en-US', {style: 'currency', currency: 'USD'})}</div>\r\n        {\r\n            quantity > 1 && <div className=\"cart-item__price-for-one\">{price.toLocaleString('en-US', {style: 'currency', currency: 'USD'})} × {quantity}</div>\r\n        }\r\n\r\n    </div>\r\n}","import {cartItemT, Constants, newCartItemT} from \"../types/cart\";\r\n\r\n\r\n\r\n\r\n/**\r\n * Open modal form for adding new cart item\r\n */\r\nexport const openAddForm = () => ({type: Constants.OPEN_ADD_FORM}) as const;\r\n\r\n\r\n/**\r\n * Close modal form\r\n */\r\nexport const closeAddForm = () => ({type: Constants.CLOSE_ADD_FORM}) as const;\r\n\r\n\r\n/**\r\n * Add new cart item\r\n * @param cartItem\r\n *\r\n */\r\n\r\nexport const addItem = (cartItem: newCartItemT) => ({type: Constants.ADD_ITEM, payload: cartItem}) as const;\r\n\r\n\r\n/**\r\n * delete cart item by id\r\n * @param id\r\n */\r\nexport const deleteItem = (id: number) => ({type: Constants.DELETE_ITEM, payload:id}) as const;\r\n\r\n/**\r\n * Increment quantity of cart item\r\n * @param id: number - cart item id\r\n */\r\n\r\nexport const incrementQuantity = (id: number) => ({type: Constants.INCREMENT_QUANTITY, payload:id}) as const;\r\n\r\n/**\r\n * Decrement quantity of cart item\r\n * @param id: number - cart item id\r\n */\r\n\r\nexport const decrementQuantity = (id: number) => ({type: Constants.DECREMENT_QUANTITY, payload:id}) as const;\r\n\r\n/**\r\n * Send request for get cart items data\r\n */\r\nexport const getItemsRequest = () => ({type: Constants.GET_ITEMS_REQUEST}) as const;\r\n\r\n/**\r\n * Get cart items data\r\n * @param cartItems\r\n */\r\nexport const getItems = (cartItems: Array<cartItemT>) => ({type: Constants.GET_ITEMS_SUCCESS, payload:cartItems}) as const;\r\n\r\n/**\r\n *\r\n */\r\nexport const getItemsError = () => ({type: Constants.GET_ITEMS_ERROR}) as const;\r\n\r\nexport type actionT = ReturnType<typeof openAddForm>\r\n                    | ReturnType<typeof closeAddForm>\r\n                    | ReturnType<typeof addItem>\r\n                    | ReturnType<typeof deleteItem>\r\n                    | ReturnType<typeof incrementQuantity>\r\n                    | ReturnType<typeof decrementQuantity>\r\n                    | ReturnType<typeof getItemsRequest>\r\n                    | ReturnType<typeof getItems>\r\n                    | ReturnType<typeof getItemsError>\r\n","import './Field.scss';\r\nimport React from \"react\";\r\n\r\ntype fieldP = {\r\n    label: string,\r\n    children: React.ReactNode,\r\n    error?: string\r\n}\r\n\r\nexport const Field =  ({label, children, error} : fieldP) => {\r\n    return <div className={'field' + (error ? ' field_error' : '')}>\r\n        <label className={'field__label'}>{label}</label>\r\n        {children}\r\n        {\r\n            error && <ErrorMessage message={error} />\r\n        }\r\n    </div>\r\n}\r\n\r\nconst ErrorMessage = ({message} : {message: string}) => {\r\n    return <div className={'error'}>{message}</div>\r\n}","import './Form.scss';\r\n\r\nimport {Field} from \"../Field/Field\";\r\nimport {useState} from \"react\";\r\nimport {newCartItemT} from \"../../redux/types/cart\";\r\n\r\ntype formT = {\r\n    name: string,\r\n    price: number | string,\r\n    quantity: number\r\n}\r\n\r\ntype errorT = {\r\n    [key in keyof formT]?: string\r\n}\r\n\r\ntype formP = {\r\n    addItem: (cartItem: newCartItemT) => void\r\n}\r\n\r\nexport const Form = ({addItem}: formP) => {\r\n\r\n    const initialFormState = {\r\n        name: '',\r\n        price: '',\r\n        quantity: 1\r\n    }\r\n\r\n    const [form, setForm] = useState<formT>(initialFormState);\r\n    const [error, setError] = useState<errorT>({});\r\n\r\n\r\n    /**\r\n     * validation input\r\n     * @param name: string - name of field\r\n     * @param value: string - value of field\r\n     *\r\n     * @return string or false - message of error, or false\r\n     */\r\n    const getValidationError = (name: string, value: string | number) => {\r\n        if (String(value).trim().length === 0) return 'This field is required';\r\n        switch (name) {\r\n            case 'quantity':\r\n                if (value < 1) return 'This field should be greater or equal then 1';\r\n                break;\r\n            case 'price':\r\n                if (value <= 0) return 'This field should be greater then 0';\r\n                break;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    const validateForm = (form: formT) => {\r\n        const errorResult: errorT = {};\r\n        let key: keyof formT;\r\n        for (key in form) {\r\n            let validationError = getValidationError(key, form[key]);\r\n            if (validationError !== false) errorResult[key] = validationError;\r\n        }\r\n        return errorResult;\r\n    }\r\n\r\n\r\n    /**\r\n     * Handle input\r\n     * @param e\r\n     */\r\n    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setForm({\r\n            ...form,\r\n            [e.target.name]: e.target.value\r\n        });\r\n    }\r\n\r\n\r\n    /**\r\n     * Submit form\r\n     * Validate all fields\r\n     * If ok - add Cart Item, else Show Field Error\r\n     *\r\n     */\r\n    const onSubmit = (e: React.SyntheticEvent) => {\r\n        e.preventDefault();\r\n        const errorResult = validateForm(form);\r\n        setError(errorResult);\r\n\r\n        if (Object.keys(errorResult).length === 0) {\r\n            addItem({\r\n                name: form.name,\r\n                price: Number(form.price),\r\n                quantity: Math.floor(form.quantity)\r\n            });\r\n        }\r\n    }\r\n\r\n    return <div className={'new-item-form'} data-testid=\"form\">\r\n        <h2 className=\"new-item-form__title\">Add New Cart Item</h2>\r\n        <form onSubmit={onSubmit} noValidate>\r\n            <Field label={'Name'} error={error?.name}>\r\n                <input className={'input'}\r\n                       type={'text'}\r\n                       name={'name'}\r\n                       onChange={handleInputChange}\r\n                       value={form.name}\r\n                       data-testid={'input-name'}\r\n                       required/>\r\n            </Field>\r\n            <Field label={'Price'} error={error?.price}>\r\n                <input className='input'\r\n                       type={'number'}\r\n                       name={'price'}\r\n                       onChange={handleInputChange}\r\n                       value={form.price}\r\n                       data-testid={'input-price'}\r\n                       min={0.01}\r\n                       step={0.01}\r\n                       required/>\r\n            </Field>\r\n            <Field label={'Quantity'} error={error?.quantity}>\r\n                <input className='input'\r\n                       type={'number'}\r\n                       name={'quantity'}\r\n                       onChange={handleInputChange}\r\n                       value={form.quantity}\r\n                       min={1}\r\n                       required\r\n                       data-testid={'input-quantity'}\r\n                />\r\n            </Field>\r\n            <div className=\"new-item-form__btns\">\r\n                <button className={'btn btn_primary'}>Создать</button>\r\n            </div>\r\n        </form>\r\n    </div>\r\n}","import './Modal.scss';\r\n\r\ntype modalP = {\r\n    close: () => void,\r\n    children: React.ReactNode\r\n}\r\n\r\nexport const Modal = ({close, children} : modalP) => {\r\n    return <div className={'modal'} onClick={close} data-testid={'modal'}>\r\n        <div className=\"modal__inside\" onClick={e => {e.stopPropagation()}} data-testid={'modal-inside'}>\r\n            <button className=\"modal__close-btn btn btn_small\" onClick={close}>✕</button>\r\n            {children}\r\n        </div>\r\n    </div>\r\n}","import './CartPage.scss';\r\n\r\nimport {Page} from \"../../component/Page/Page\";\r\nimport {CartItem} from \"../../component/CartItem/CartItem\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    addItem,\r\n    closeAddForm,\r\n    decrementQuantity,\r\n    deleteItem,\r\n    getItemsRequest,\r\n    incrementQuantity,\r\n    openAddForm\r\n} from \"../../redux/actions/cart\";\r\nimport {cartItemT} from \"../../redux/types/cart\";\r\nimport {Form} from \"../../component/Form/Form\";\r\nimport {useEffect} from \"react\";\r\nimport {Modal} from \"../../component/Modal/Modal\";\r\nimport {stateT} from \"../../redux/store/store\";\r\n\r\nexport const CartPage = () => {\r\n    const cart = useSelector((state: stateT) => state.cart);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        // fetch Data\r\n        dispatch(getItemsRequest());\r\n\r\n    }, [dispatch]);\r\n\r\n    return <Page title={'Shopping cart'}>\r\n        {\r\n            cart.isLoading ? <div data-testid={'loading'}>Loading...</div> :\r\n\r\n                <div className={'cart'} data-testid={'cart'}>\r\n                    <div className=\"cart__bar\">\r\n                        <button className={'btn btn_primary'} onClick={() => dispatch(openAddForm())}>Add Cart Item</button>\r\n                    </div>\r\n                    <div className=\"cart__list\">\r\n                        {\r\n                            cart.items.length > 0 ?\r\n                                cart.items.map((item: cartItemT) => <CartItem key={item.id}\r\n                                                                              item={item}\r\n                                                                              incrementQuantity={() => dispatch(incrementQuantity(item.id))}\r\n                                                                              decrementQuantity={() => dispatch(decrementQuantity(item.id))}\r\n                                                                              deleteItem={() => dispatch(deleteItem(item.id))}\r\n\r\n                                />)\r\n                                : <span>Cart is empty</span>\r\n                        }\r\n                    </div>\r\n                    {\r\n                        cart.openAddForm && <Modal close={() => dispatch(closeAddForm())}>\r\n                                                <Form\r\n                                                    addItem={(cartItem) => dispatch(addItem(cartItem))}/>\r\n                                            </Modal>\r\n                    }\r\n                </div>\r\n        }\r\n    </Page>\r\n}","import 'normalize.css';\nimport './styles/common.scss';\n\nimport React from 'react';\nimport {CartPage} from \"./containers/CartPage/CartPage\";\n\nfunction App() {\n  return <CartPage />;\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {cartStateT, cartItemT, Constants} from \"../types/cart\";\r\nimport {actionT} from \"../actions/cart\";\r\n\r\nconst initialState = {\r\n    isLoading: true,\r\n    openAddForm: false,\r\n    items: [],\r\n}\r\n\r\nexport const cartReducer = (state: cartStateT = initialState, action: actionT) => {\r\n    switch (action.type) {\r\n        case Constants.GET_ITEMS_SUCCESS:\r\n            return {\r\n                ...state,\r\n                items: action.payload,\r\n                isLoading: false\r\n            }\r\n        case Constants.GET_ITEMS_ERROR:\r\n            return {\r\n                ...state,\r\n                items: [],\r\n                isLoading: false\r\n            }\r\n        case Constants.OPEN_ADD_FORM:\r\n            return {\r\n                ...state,\r\n                openAddForm: true\r\n            }\r\n        case Constants.CLOSE_ADD_FORM:\r\n            return {\r\n                ...state,\r\n                openAddForm: false\r\n            }\r\n        case Constants.ADD_ITEM:\r\n            return {\r\n                ...state,\r\n                items: [{\r\n                    ...action.payload,\r\n                    id: getNextId(state.items)\r\n                    },\r\n                    ...state.items],\r\n                openAddForm: false\r\n            }\r\n        case Constants.INCREMENT_QUANTITY:\r\n            return {\r\n                ...state,\r\n                items: state.items.map((item => {\r\n                    if (item.id === action.payload) {\r\n                        item.quantity = item.quantity + 1\r\n                    }\r\n                    return item;\r\n                }))\r\n            }\r\n        case Constants.DECREMENT_QUANTITY:\r\n            return {\r\n                ...state,\r\n                items: state.items.map((item => {\r\n                    if (item.id === action.payload) {\r\n                        if (item.quantity > 1) item.quantity = item.quantity - 1\r\n                    }\r\n                    return item;\r\n                }))\r\n            }\r\n        case Constants.DELETE_ITEM:\r\n            return {\r\n                ...state,\r\n                items: state.items.filter((item => item.id !== action.payload))\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Get Next Id for new cart item\r\n * @param items: array of cart items\r\n */\r\nconst getNextId = (items: Array<cartItemT>) => items.reduce((max: number, item) => (max < item.id) ? item.id : max, 0) + 1;","import {combineReducers} from \"redux\";\r\nimport {cartReducer} from \"./cart\";\r\n\r\nexport const rootReducer = combineReducers({\r\n    cart: cartReducer\r\n});","import {cartItemT} from \"../redux/types/cart\";\r\n\r\nconst URL = 'api/cart.json';\r\n//const URL = 'https://mocki.io/v1/a92eda42-69d0-43c5-bc66-cd56e4b8c906';\r\n\r\nexport const getCartItemsApi = async (): Promise<Array<cartItemT>> => {\r\n    return await fetch(URL).then((res) => res.json());\r\n}","import { call, put, takeEvery } from 'redux-saga/effects'\r\nimport {cartItemT, Constants} from \"../types/cart\";\r\nimport {getCartItemsApi} from \"../../api/cartApi\";\r\nimport {getItems, getItemsError} from \"../actions/cart\";\r\n\r\n\r\nfunction* fetchCart()  {\r\n    try {\r\n        const cartItems: Array<cartItemT> = yield call(getCartItemsApi);\r\n        yield put(getItems(cartItems));\r\n    } catch (e) {\r\n        yield put(getItemsError());\r\n    }\r\n}\r\n\r\nexport function* cartSaga() {\r\n    yield takeEvery(Constants.GET_ITEMS_REQUEST, fetchCart);\r\n}","import createSagaMiddleware from 'redux-saga'\r\nimport {createStore, applyMiddleware} from \"redux\";\r\nimport {rootReducer} from \"../reducers\";\r\nimport {cartSaga} from \"../sagas/cart\";\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(sagaMiddleware));\r\n\r\nsagaMiddleware.run(cartSaga);\r\n\r\nexport type stateT = ReturnType<typeof store.getState>","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./redux/store/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n          <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}